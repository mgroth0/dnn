#!/bin/sh
"""exec" "$HOME/miniconda3/envs/dnn/bin/python" "$0" "$@"""
from matplotlib import pyplot as plt

from lib.nn.net_mets import *


labels = {
    "S4" : 0,
    "NS4": 1
}

subject_files = Folder('_data_human').listmfiles()

for sub_file in subject_files:
    results = {
        100: {'y_true': [], 'y_pred': []},
        200: {'y_true': [], 'y_pred': []},
        300: {'y_true': [], 'y_pred': []},
        400: {'y_true': [], 'y_pred': []},
        500: {'y_true': [], 'y_pred': []}
    }
    for line in sub_file.read().split("\n"):
        y_true = line.split("/")[0]
        t = int(line.split("|")[1].split("=")[0])
        c = line.split("=")[1]
        y_pred = "S4" if c == "ArrowRight" else "NS4"

        y_true = labels[y_true]
        y_pred = labels[y_pred]

        results[t]['y_true'].append(y_true)
        results[t]['y_pred'].append(y_pred)

    for k, v in listitems(results):
        TP, FP, TN, FN, P, N = binary_results(arr(v['y_true']), arr(v['y_pred']))
        breakpoint()
        v['mcc'] = mcc_basic(TP, FP, TN, FN)
        v['acc'] = 1 - error_rate_basic(FP, FN, P, N)

    print(results)

    w = 0.3

    plt.bar(
        arr([1, 2, 3, 4, 5]),
        [
            results[100]['mcc'],
            results[200]['mcc'],
            results[300]['mcc'],
            results[400]['mcc'],
            results[500]['mcc']
        ],
        tick_label=[100, 200, 300, 400, 500],
        width=w,
        align='center',
        color='b'
    )
    plt.bar(
        arr([1, 2, 3, 4, 5]) + w,
        [
            results[100]['acc'],
            results[200]['acc'],
            results[300]['acc'],
            results[400]['acc'],
            results[500]['acc']
        ],
        width=w,
        align='center',
        color='g'
        # tick_label=[100, 200, 300, 400, 500],
    )

    plt.title("Symmetry Detection, subject=" + sub_file.name_pre_ext)
    plt.ylabel("Metrics")
    plt.ylim([-1, 1])
    plt.xlabel("Stimulus Time Interval (ms)")
    plt.legend(['MCC', 'Accuracy'])
    fold = Folder('_figs/sym/human').mkdirs()
    plt.savefig(fold[f'{sub_file.name_pre_ext}.png'])
